header.cpp
header.c++
header.cxx
header.cc
header.C
header.hpp
header.h++
header.hxx
header.hh

#c++ 98
-std=c++98 ou -std=gnu++98 
-std=c++0x ou -std=gnu++0x

#c++ 11
-std=c++11 or -std=gnu++11
-std=c++11x or -std=gnu++11x

#c++ 14
-std=c++1y or -std=gnu++1y
-std=c++14 or -std=gnu++14

#c++ 17
-std=c++1z  or -std=gnu++1z

clang++ -std=c++0x -stdlib=libc++ regex_01.cpp -o regex_01.out

make HOSTCC=clang CC=clang
For cross: make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- HOSTCC=clang CC=clang
For cross: make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- HOSTCC=clang CC=clang 

CROSS_COMPILE=arm-linux-gnueabihf



SUBARCH := $(shell uname -m | sed -e s/i.86/x86/ -e s/x86_64/x86/ \
				  -e s/sun4u/sparc64/ \
				  -e s/arm.*/arm/ -e s/sa110/arm/ \
				  -e s/s390x/s390/ -e s/parisc64/parisc/ \
				  -e s/ppc.*/powerpc/ -e s/mips.*/mips/ \
				  -e s/sh[234].*/sh/ -e s/aarch64.*/arm64/ )
				  
ARCH		?= $(SUBARCH)
CROSS_COMPILE	?= $(CONFIG_CROSS_COMPILE:"%"=%)

# Architecture as present in compile.h
UTS_MACHINE 	:= $(ARCH)
SRCARCH 	:= $(ARCH)

# Additional ARCH settings for x86
ifeq ($(ARCH),i386)
        SRCARCH := x86
endif
ifeq ($(ARCH),x86_64)
        SRCARCH := x86
endif

# Additional ARCH settings for sparc
ifeq ($(ARCH),sparc32)
       SRCARCH := sparc
endif
ifeq ($(ARCH),sparc64)
       SRCARCH := sparc
endif

# Additional ARCH settings for sh
ifeq ($(ARCH),sh64)
       SRCARCH := sh
endif
